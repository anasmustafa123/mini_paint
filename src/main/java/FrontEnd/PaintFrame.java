/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package FrontEnd;

import shapes.Oval;
import shapes.Shape;
import shapes.LineSegment;
import shapes.Rectangle;
import shapes.Triangle;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import org.json.simple.DeserializationException;
import org.json.simple.JsonArray;
import org.json.simple.JsonObject;
import org.json.simple.Jsoner;
import shapes.AbstractShape;

/**
 *
 * @author EXPERTS
 */
public class PaintFrame extends javax.swing.JFrame implements Node{

    private final MyPanel myPanel1;
    /**
     * Creates new form PaintFrame
     */
    public PaintFrame() {
        initComponents();
        JMenuItem save,load;

        KeyStroke ctrlS  = KeyStroke.getKeyStroke("ctrl S");
        KeyStroke ctrlL  = KeyStroke.getKeyStroke("ctrl L");
        Action saveAction= new SaveAction();
        Action loadAction = new LoadAction();
        save = new JMenuItem(saveAction);
        load = new JMenuItem(loadAction);
        save.setText("save");
        load.setText("load");
        menu.add(save);
        menu.add(load); 
        
        
        myPanel1 = (MyPanel)myPanel;
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setTitle(" Drawing app ");
        
        InputMap imap = myPanel1.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        imap.put(ctrlS, "SaveAction");
        imap.put(ctrlL, "LoadAction");
        ActionMap amap = myPanel1.getActionMap();
        amap.put("SaveAction", saveAction);
        amap.put("LoadAction", loadAction);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ColorizeButton = new javax.swing.JButton();
        LINEBUTTON = new javax.swing.JButton();
        TriangleButton = new javax.swing.JButton();
        circleButton = new javax.swing.JButton();
        RectangleButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        compobox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        myPanel = new MyPanel(this);
        CopyButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ColorizeButton.setText("Colorize");
        ColorizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorizeButtonActionPerformed(evt);
            }
        });

        LINEBUTTON.setText("Line");
        LINEBUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LINEBUTTONActionPerformed(evt);
            }
        });

        TriangleButton.setText("Triangle");
        TriangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TriangleButtonActionPerformed(evt);
            }
        });

        circleButton.setText("Oval");
        circleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleButtonActionPerformed(evt);
            }
        });

        RectangleButton.setText("Rectangle");
        RectangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RectangleButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        compobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a Shape" }));
        compobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compoboxActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Select a Shape");

        myPanel.setBackground(new java.awt.Color(255, 255, 255));
        myPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout myPanelLayout = new javax.swing.GroupLayout(myPanel);
        myPanel.setLayout(myPanelLayout);
        myPanelLayout.setHorizontalGroup(
            myPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        myPanelLayout.setVerticalGroup(
            myPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        CopyButton.setText("Copy");
        CopyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyButtonActionPerformed(evt);
            }
        });

        jMenuBar1.setToolTipText("");
        jMenuBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        menu.setText("File");
        jMenuBar1.add(menu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(269, Short.MAX_VALUE)
                .addComponent(LINEBUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(136, 136, 136)
                .addComponent(circleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(174, 174, 174)
                .addComponent(RectangleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(161, 161, 161)
                .addComponent(TriangleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ColorizeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeleteButton))
                            .addComponent(compobox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(CopyButton)
                        .addGap(54, 54, 54)))
                .addComponent(myPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RectangleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TriangleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LINEBUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(circleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(154, 154, 154)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(compobox, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeleteButton)
                    .addComponent(ColorizeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CopyButton)
                .addContainerGap(162, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(myPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           

    } 
    
    private void LINEBUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LINEBUTTONActionPerformed
        // TODO add your handling code here:
         LineSegment lineSegment = new LineSegment();
        LineSegmentInput lineSegmentInput = new LineSegmentInput(lineSegment,this);  
        lineSegmentInput.setParentNode(this);
        lineSegmentInput.setResizable(false);
        lineSegmentInput.setLocationRelativeTo(null);
        lineSegmentInput.setTitle("Line Segment Data");
        this.setVisible(false);
        lineSegmentInput.setVisible(true);
    }//GEN-LAST:event_LINEBUTTONActionPerformed

    private void RectangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RectangleButtonActionPerformed
        // TODO add your handling code here:
        Rectangle rectangle =  new Rectangle();
        RectangleInput rectangleInput = new RectangleInput(rectangle,this);
        rectangleInput.setLocationRelativeTo(null);
        rectangleInput.setParentNode(this);
        rectangleInput.setVisible(true);
        this.setVisible(false);      
    }//GEN-LAST:event_RectangleButtonActionPerformed

    private void TriangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TriangleButtonActionPerformed
        // TODO add your handling code here:
        Triangle triangle = new Triangle();
        TriangleInput triangleInput = new TriangleInput(triangle,this);
        triangleInput.setLocationRelativeTo(null);
        triangleInput.setParentNode(this);
        triangleInput.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_TriangleButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        // TODO add your handling code here:
        if(compobox.getSelectedIndex() == 0){
        JOptionPane.showMessageDialog(null, "choose a shape");
        }
        else{
            int index = compobox.getSelectedIndex() ;
            Shape x = (myPanel1.getShapes())[index-1];
            myPanel1.removeShape(x);
            compobox.removeItemAt(index);
            myPanel1.refresh(null);
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void CopyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyButtonActionPerformed
        // TODO add your handling code here:\
        if(compobox.getSelectedIndex() == 0){
        JOptionPane.showMessageDialog(null, "choose a shape");
        }
        else{
        int index = compobox.getSelectedIndex() - 1 ; //compobox has one more item than the arraylist which is "selct A shape"
            System.err.println(index);
        AbstractShape temp = (AbstractShape) (myPanel1.getShapes() )[index];
        AbstractShape copy = null;
            if(temp instanceof LineSegment){
                   copy = new LineSegment();
                   ((LineSegment)copy).setPosition2(((LineSegment) temp).getPosition2());
            }
             
            else  if(temp instanceof Oval){
               copy = new Oval();
               ((Oval)copy).setWidth(((Oval) temp).getWidth());
               ((Oval)copy).setheight(((Oval) temp).getheight());
               
            }
            else  if(temp instanceof Triangle){
                copy = new Triangle();
                ((Triangle)copy).setPosition2(((Triangle) temp).getPosition2());
                ((Triangle)copy).setPosition3(((Triangle) temp).getPosition3());
            }
            else  if(temp instanceof Rectangle){
            copy = new Rectangle();
                ((Rectangle)copy).setWidth(((Rectangle) temp).getWidth());
               ((Rectangle)copy).setHeigth(((Rectangle) temp).getHeigth());
            }
            copy.setColor(temp.getColor());
            copy.setDraggingPoint(temp.getDraggingPoint());
            copy.setFillColor(temp.getFillColor());
            copy.setIfClicked(temp.getIfClicked());
            copy.setPosition(temp.getPosition());
            addShape(copy);
        }
        
    }//GEN-LAST:event_CopyButtonActionPerformed

                                     
    
    public void addShape(Shape shape){
            myPanel1.addShape(shape);
            if(shape instanceof LineSegment)
                compobox.addItem("Line" + myPanel1.getShapes().length);   
            else  if(shape instanceof Oval)
                compobox.addItem("Circle" + myPanel1.getShapes().length);   
            else  if(shape instanceof Triangle)
                compobox.addItem("Triangle" + myPanel1.getShapes().length);   
            else  if(shape instanceof Rectangle)
                compobox.addItem("Rectangle" + myPanel1.getShapes().length);   
            myPanel1.refresh(null);
    }
    public void toTopOFCompoBox (int i) {
        String item = compobox.getItemAt(i+1);
        compobox.removeItemAt(i+1);
        compobox.addItem(item);
    }
    public void selectItemCompoBox(int index){
        compobox.setSelectedIndex(index +1);
    }
                                                                                        

    private void circleButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        Oval circle = new Oval();
        CircleInput circleInput = new CircleInput(circle,this);
        circleInput.setLocationRelativeTo(null);
        circleInput.setParentNode(this);
        circleInput.setVisible(true);
        this.setVisible(false);
    }                                            

    private void ColorizeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
        if(compobox.getSelectedIndex() == 0){
        JOptionPane.showMessageDialog(null, "choose a shape");
        }
        else{
        Shape x = (myPanel1.getShapes())[compobox.getSelectedIndex() - 1];
        Color boarderColor = JColorChooser.showDialog(null, "enter border  color", Color.BLACK);
        if(x instanceof LineSegment){}
        else{
            Color fillColor = JColorChooser.showDialog(null, "enter fill  color", Color.BLACK);
            x.setFillColor(fillColor); 
        }  
        x.setColor(boarderColor);
        myPanel1.refresh(null);
        }
    }                                              

    private void compoboxActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        
     /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaintFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaintFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaintFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaintFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaintFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ColorizeButton;
    private javax.swing.JButton CopyButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton LINEBUTTON;
    private javax.swing.JButton RectangleButton;
    private javax.swing.JButton TriangleButton;
    private javax.swing.JButton circleButton;
    private javax.swing.JComboBox<String> compobox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu menu;
    private javax.swing.JPanel myPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setParentNode(Node parentNode) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public Node getParentNode() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
    private class SaveAction extends AbstractAction{

        @Override
        public void actionPerformed(ActionEvent e) {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("."));
        int options = chooser.showSaveDialog(null) ;
        if(options == JFileChooser.APPROVE_OPTION){
        String stringPath = chooser.getSelectedFile().getAbsolutePath();
        JsonArray j = new JsonArray();
        Shape[] shapes = myPanel1.getShapes();
        for(int i = 0 ;i < shapes.length ;i++ )
        {
            j.add(shapes[i].toJsonJSObject());
        }
        String jsonText = Jsoner.serialize(j) ; //serializing the json array
        Path path = Path.of(stringPath);
            try {
                Files.write(path, jsonText.getBytes(), StandardOpenOption.CREATE); //writing the json array in the file
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        }
    }  
    }
    private class LoadAction extends AbstractAction{

        @Override
        public void actionPerformed(ActionEvent e) {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("."));
        int options = chooser.showOpenDialog(null) ;
        String stringPath = chooser.getSelectedFile().getAbsolutePath();
        Path path = Path.of(stringPath);
        String jsonString;
        if(options == JFileChooser.APPROVE_OPTION){
            try {
                jsonString = new String(Files.readAllBytes(path));
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
            try {
                JsonArray j = (JsonArray) Jsoner.deserialize(jsonString);
            } catch (DeserializationException ex) {
                Logger.getLogger(PaintFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            myPanel1.removeAllShapes();
            for(Jsonobject obj : j )
            {
                int t = ((BigDecimal)obj.get("key")).intvalue() ;
                AbstractShape shape;
                
                switch(t){
                        case 1 -> {shape= new LineSegment();}
                        case 2 -> {shape = new Oval();}
                        case 3 -> {shape = new Rectangle();}
                        case 4 -> {shape = new Triangle();}
                        default -> {}
                }
                myPanel1.addShape(shape.fromJsonToShape(obj));
                
            }
            myPanel1.refresh(null);
    }  
        }
        
    }
}

